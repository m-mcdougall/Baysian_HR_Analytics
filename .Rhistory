y = "Critic Score",
color = "Genre")
avg_genre
summary(data$Critic_Score)
summary(data$Critic_Score)
table(data$Platform)
summary(data$Critic_Score)
table(data$Critic_Score)
table(data$Platform)
table(data$Genre)
LeveneTest(Critic_Score ~ Platform:Genre, data = data) ## interaction groups
#HOMOGENEITY OF VARIANCE TESTS
LeveneTest(Critic_Score ~ Platform, data = data)
LeveneTest(Critic_Score ~ Genre, data = data)
LeveneTest(Critic_Score ~ Platform:Genre, data = data) ## interaction groups
# TWO WAY ANOVA TEST
genre_platform_criticscore <- aov(Critic_Score ~ Genre*Platform, data = data)
summary(genre_platform_criticscore)
## PLOT RESIDUALS
resid_df <- data.frame(resid = genre_platform_criticscore$residuals) ## the residuals part of the aov results using $residuals
resid_df %>% ggplot(aes(sample = resid)) +
geom_qq_line(color = "red", size = 1) +
geom_qq(color = "black") +
labs(title = "QQ Plot of Residuals")
TukeyHSD(genre_platform_criticscore)
er_lm <- lm(Critic_Score ~ Genre*Platform, data = data)
rsq <- summary(er_lm)$r.squared
rsq # proportion
percent(rsq, accuracy = .01) # percentage
eta2 <- EtaSq(genre_platform_criticscore) ## give eta-squared the saved anova output
eta2 # print the entire eta-squared output
## calculate cohen's f using saved value of rsq
cohenf <- sqrt(rsq / (1-rsq))
cohenf
df_aov <- broom::tidy(genre_platform_criticscore)
df_aov
#convert df to pq format
#update the first column to PQ names
df_aov$term <- c("Genre", "Platform", "Interaction of Genre and Platform", "Residuals")
#format F and p-values, convert to character and replace NA with blank string ""
df_aov$statistic <- formatC(df_aov$statistic, digits = 3, format = "f")
df_aov$p.value <- formatC(df_aov$p.value, digits = 3, format = "f")
df_aov[4,5:6] <- ""
#update colnames to PQ
colnames(df_aov) <- c("Source of Variation", "DF", "Sum of Squares", "Mean Squares", "F-ratio", "p-value")
tname <- "ANOVA Model: The Impact of Genre and Gaming Platform on Critic Score"
titlehead <- c(tname = 6)
names(titlehead) <- tname
df_aov %>% kable(booktabs = T, align = "lcrrcc") %>%
kable_styling(full_width = FALSE) %>%
add_header_above(header = titlehead, align = "l",
extra_css = "border-top: solid; border-bottom: double;") %>%
row_spec(0, extra_css = "border-bottom: solid;") %>%
row_spec(nrow(df_aov), extra_css = "border-bottom: solid;") %>%
save_kable("p3_pq_anova.png") ## save as image
df_aov
den_platform <- data %>%
ggplot(aes(x=Critic_Score, fill=Platform)) +  ## divide income by 1000 to make the axes tick marks more readable.
geom_density(alpha=0.6) +
scale_fill_manual(values=c("#ff9999", "#ff9966", "#99ff99", "#99ffff","#9999ff")) +
labs(fill= "Platform",
y = "Density",
x = "Critic Score",
title = "Distribution of Critic Score by Platform")+
theme(plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "cm"))
den_platform
ggsave("den_platform.png")
den_platform <- data %>%
ggplot(aes(x=Critic_Score, fill=Platform)) +  ## divide income by 1000 to make the axes tick marks more readable.
geom_density(alpha=0.6) +
scale_fill_manual(values=c("#ff9999", "#ff9966", "#99ff99", "#99ffff","#9999ff")) +
labs(fill= "Platform",
y = "Density",
x = "Critic Score",
title = "Distribution of Critic Score by Platform")+
theme(plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "cm"))
den_platform
#ggsave("den_platform.png")
den_genre <- data %>%
ggplot(aes(x=Critic_Score, fill=Genre)) +  ## divide income by 1000 to make the axes tick marks more readable.
geom_density(alpha=0.6) +
scale_fill_manual(values=c("#ff9999", "#ff9966", "#99ff99", "#99ffff","#9999ff","#ffff99","#65ccff", "#ff99ff","#ff0099","#006600", "#ff0000","blue")) +
labs(fill= "Genre",
y = "Density",
x = "Critic Score",
title = "Distribution of Critic Score by Genre")+
theme(plot.margin = unit(c(.1, .1, .1, .1), "cm"))
den_genre
ggsave("den_genre.png")
den_genre <- data %>%
ggplot(aes(x=Critic_Score, fill=Genre)) +  ## divide income by 1000 to make the axes tick marks more readable.
geom_density(alpha=0.6) +
scale_fill_manual(values=c("#ff9999", "#ff9966", "#99ff99", "#99ffff","#9999ff","#ffff99","#65ccff", "#ff99ff","#ff0099","#006600", "#ff0000","blue")) +
labs(fill= "Genre",
y = "Density",
x = "Critic Score",
title = "Distribution of Critic Score by Genre")+
theme(plot.margin = unit(c(.1, .1, .1, .1), "cm"))
den_genre
#ggsave("den_genre.png")
avg_genre_plat<-data %>%
ggplot(aes(x = Platform, color = Genre, group = Genre, y = Critic_Score)) +
stat_summary(fun.y = mean, geom = "point", size = 5) +
stat_summary(fun.y = mean, geom = "line", size = 2) +
labs(title = "Average Critic Score by Genre and Platform",
x = "Platform",
y = "Critic Score",
color = "Genre")
avg_genre_plat
ggsave("avg_genre_plat.png")
avg_genre_plat<-data %>%
ggplot(aes(x = Platform, color = Genre, group = Genre, y = Critic_Score)) +
stat_summary(fun.y = mean, geom = "point", size = 5) +
stat_summary(fun.y = mean, geom = "line", size = 2) +
labs(title = "Average Critic Score by Genre and Platform",
x = "Platform",
y = "Critic Score",
color = "Genre")
avg_genre_plat
#ggsave("avg_genre_plat.png")
summary(data$Critic_Score)
## PLOT RESIDUALS
resid_df <- data.frame(resid = genre_platform_criticscore$residuals) ## the residuals part of the aov results using $residuals
resid_df %>% ggplot(aes(sample = resid)) +
geom_qq_line(color = "red", size = 1) +
geom_qq(color = "black") +
labs(title = "QQ Plot of Residuals")
ggsave("genre_plat_resid_df.png")
## PLOT RESIDUALS
resid_df <- data.frame(resid = genre_platform_criticscore$residuals) ## the residuals part of the aov results using $residuals
resid_df %>% ggplot(aes(sample = resid)) +
geom_qq_line(color = "red", size = 1) +
geom_qq(color = "black") +
labs(title = "QQ Plot of Residuals")
#ggsave("genre_plat_resid_df.png")
library(tidyverse)
# if you want to use olsrr - not required.
# install.packages("olsrr")
#library(olsrr) ## if you want to use this package
## make sure that the boston.rds file is saved in the same folder as this notebook!!!
boston <- readRDS("boston.rds") ## load boston.rds and save it as a df named boston
#drop a couple columns that are not usable for this assignment
boston$chas <- NULL
boston$rad <- NULL
glimpse(boston) ## take a peek at the dataframe
## SCATTERPLOT CODE HERE
boston %>% ggplot(aes(x = lstat, y = medv)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "%lower status of the population within that census tract",
y = "Median Value of Owner-Occupied Homes in $1000's within that Census Tract",
title = "Relationship between Lower Status of Population within Census Tract and Median Value of Owner Occupied Homes")
## SCATTERPLOT CODE HERE
boston %>% ggplot(aes(x = lstat, y = medv)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "%lower status of the population in census tract",
y = "Median Value of Owner-Occupied Homes in $1000's in Census Tract",
title = "Relationship between Lower Status of Population and Median Value of Owner Occupied Homes")
## SCATTERPLOT CODE HERE
boston %>% ggplot(aes(x = lstat, y = medv)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "%lower status of the population in census tract",
y = "Median Value of Owner-Occupied Homes in $1000's in Census Tract",
title = "Relationship between Low-Status Population and Median Value of Owner-Occupied Homes")
## SCATTERPLOT CODE HERE
boston %>% ggplot(aes(x = lstat, y = medv)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "%lower status of the population",
y = "Median Value of Owner-Occupied Homes in $1000's",
title = "Low-Status Population vs. Median Value of Owner-Occupied Homes")
## SCATTERPLOT CODE HERE
boston %>% ggplot(aes(x = lstat, y = medv)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "%lower status of the population",
y = "Median Value of Owner-Occupied Homes in $1000's",
title = "% of Low-Status Population vs. Median Value of Owner-Occupied Homes")
## SCATTERPLOT CODE HERE
boston %>% ggplot(aes(x = lstat, y = medv)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "% Lower Status of the Population",
y = "Median Value of Owner-Occupied Homes in $1000's",
title = "% of Low-Status Population vs. Median Value of Owner-Occupied Homes")
## PUT MODEL FIT CODE HERE
# lm(outcome ~ predictor, data = yourdf)
mod1 <- lm(medv ~ lstat, data = boston)
summary(mod1)
## PUT CODE TO CHECK NORMALITY OF RESIDUALS HERE
boston %>% ggplot(aes(sample = resid)) +
geom_qq_line(color = "red", size = 1) +
geom_qq(color = "black") +
labs(title = "QQ Plot of Residuals")
## PUT CODE TO CHECK NORMALITY OF RESIDUALS HERE
boston %>% ggplot(aes(sample = boston)) +
geom_qq_line(color = "red", size = 1) +
geom_qq(color = "black") +
labs(title = "QQ Plot of Residuals")
## PUT CODE TO CHECK NORMALITY OF RESIDUALS HERE
resfit <- data.frame(resid = boston$residuals,
fitted = boston$fitted.values)
resfit %>% ggplot(aes(sample = resid())) +
geom_qq_line(color = "red", size = 1) +
geom_qq(color = "black") +
labs(title = "QQ Plot of Residuals")
## PUT CODE TO CHECK NORMALITY OF RESIDUALS HERE
resfit <- data.frame(resid = mod1$residuals,
fitted = mod1$fitted.values)
resfit %>% ggplot(aes(sample = resid())) +
geom_qq_line(color = "red", size = 1) +
geom_qq(color = "black") +
labs(title = "QQ Plot of Residuals")
resfit <- data.frame(resid = mod1$residuals,
fitted = mod1$fitted.values)
## PUT CODE TO CHECK NORMALITY OF RESIDUALS HERE
resfit <- data.frame(resid = mod1$residuals,
fitted = mod1$fitted.values)
resfit %>% ggplot(aes(sample =resid)) +
geom_qq_line(color = "red", size = 1) +
geom_qq(color = "black") +
labs(title = "QQ Plot of Residuals")
## PUT CODE TO CHECK FOR INFLUENTIAL OUTLIERS HERE
ols_plot_resid_lev(mod1)
## PUT CODE TO CHECK FOR INFLUENTIAL OUTLIERS HERE
cd <- cooks.distance(mod1)
lev <- cd > 0.5
cd[lev]
ols_plot_resid_lev(mod1)
library(tidyverse)
# if you want to use olsrr - not required.
install.packages("olsrr")
#library(olsrr) ## if you want to use this package
library(tidyverse)
library(olsrr)
# if you want to use olsrr - not required.
#install.packages("olsrr")
#library(olsrr) ## if you want to use this package
## PUT CODE TO CHECK FOR INFLUENTIAL OUTLIERS HERE
cd <- cooks.distance(mod1)
lev <- cd > 0.5
cd[lev]
ols_plot_resid_lev(mod1)
## PUT CODE TO CHECK FOR INFLUENTIAL OUTLIERS HERE
ols_plot_resid_lev(mod1)
## PUT CODE TO CHECK FOR HETEROSCEDASTICITY HERE
plot(mod1, which = c(1,3))
ols_test_breusch_pagan(mod1)
## PUT CODE TO CHECK FOR INDEPENDENCE OF ERRORS
plot(mod1, which = c(1,3))
library(tidyverse)
library(car)
install.packages("olsrr") ## you can do the lab without this package, but there are alternate options in the binder if you want to use them
# library(olsrr) ## if you want to use this package
## make sure that the boston.rds file is saved in the same folder as this notebook!!!
boston <- readRDS("boston.rds") ## load boston.rds and save it as a df named boston
#drop a column that are not usable for this assignment
boston$rad <- NULL
glimpse(boston) ## take a peek at the dataframe
### INSERT CODE TO GENERATE SCATTERPLOT MATRIX AND/OR CORRELATION MATRIX HERE
pairs(boston[c(13,1:5)])
### INSERT CODE TO GENERATE SCATTERPLOT MATRIX AND/OR CORRELATION MATRIX HERE
pairs(boston[c(13,1:12)])
### INSERT CODE TO GENERATE SCATTERPLOT MATRIX AND/OR CORRELATION MATRIX HERE
pairs(boston[c(13,5:12)])
### INSERT CODE TO GENERATE SCATTERPLOT MATRIX AND/OR CORRELATION MATRIX HERE
pairs(boston[c(13,5:10)])
### INSERT CODE TO GENERATE SCATTERPLOT MATRIX AND/OR CORRELATION MATRIX HERE
pairs(boston[c(13,10:12)])
### INSERT CODE TO GENERATE SCATTERPLOT MATRIX AND/OR CORRELATION MATRIX HERE
pairs(boston[c(13,1:5)])
### INSERT CODE TO GENERATE SCATTERPLOT MATRIX AND/OR CORRELATION MATRIX HERE
pairs(boston[c(13,5:10)])
## PUT MODEL FIT CODE HERE
mod1 <- lm(medv ~ crim, data = boston)
# use summary on saved model output to see the results
summary(mod1)
## PUT MODEL FIT CODE HERE
mod1 <- lm(medv ~ crim, data = boston)
mod2 <- lm(medv ~ rm, data = boston)
# use summary on saved model output to see the results
summary(mod1,mod2)
## PUT MODEL FIT CODE HERE
mod1 <- lm(medv ~ crim, data = boston)
mod2 <- lm(medv ~ rm, data = boston)
# use summary on saved model output to see the results
summary(mod1)
summary(mod2)
## PUT MODEL FIT CODE HERE
mod1 <- lm(medv ~ crim, data = boston)
mod2 <- lm(medv ~ rm, data = boston)
mod3 <- lm(medv ~ dis, data = boston)
mod4 <- lm(medv ~ age, data = boston)
# use summary on saved model output to see the results
summary(mod1)
summary(mod2)
summary(mod3)
summary(mod4)
table(boston$dis)
summary(boston$dis)
## PUT CODE TO CHECK NORMALITY OF RESIDUALS HERE
resfit <- data.frame(resid = mod1$residuals,
fitted = mod1$fitted.values)
#plot with ggplot
resfit %>% ggplot(aes(x = fitted, y = resid)) +
geom_point() +
geom_smooth(color = "red", se = FALSE) +
## do not use method = "lm" - we want to see possible curvilinear relationships
## se = FALSE because we don't need CI around line.
labs(x = "Fitted Values",
y = "Residuals",
title = "Model One - Residuals vs. Fitted")
resfit3 <- data.frame(resid = mod3$residuals,
fitted = mod3$fitted.values)
#plot with ggplot
resfit3 %>% ggplot(aes(x = fitted, y = resid)) +
geom_point() +
geom_smooth(color = "red", se = FALSE) +
## do not use method = "lm" - we want to see possible curvilinear relationships
## se = FALSE because we don't need CI around line.
labs(x = "Fitted Values",
y = "Residuals",
title = "Model One - Residuals vs. Fitted")
resfit2 <- data.frame(resid = mod2$residuals,
fitted = mod2$fitted.values)
#plot with ggplot
resfit2 %>% ggplot(aes(x = fitted, y = resid)) +
geom_point() +
geom_smooth(color = "red", se = FALSE) +
## do not use method = "lm" - we want to see possible curvilinear relationships
## se = FALSE because we don't need CI around line.
labs(x = "Fitted Values",
y = "Residuals",
title = "Model One - Residuals vs. Fitted")
resfit4 <- data.frame(resid = mod4$residuals,
fitted = mod4$fitted.values)
#plot with ggplot
resfit4 %>% ggplot(aes(x = fitted, y = resid)) +
geom_point() +
geom_smooth(color = "red", se = FALSE) +
## do not use method = "lm" - we want to see possible curvilinear relationships
## se = FALSE because we don't need CI around line.
labs(x = "Fitted Values",
y = "Residuals",
title = "Model One - Residuals vs. Fitted")
## PUT CODE TO CHECK NORMALITY OF RESIDUALS HERE
resfit <- data.frame(resid = mod1$residuals,
fitted = mod1$fitted.values)
#plot with ggplot
resfit %>% ggplot(aes(x = fitted, y = resid)) +
geom_point() +
geom_smooth(color = "red", se = FALSE) +
## do not use method = "lm" - we want to see possible curvilinear relationships
## se = FALSE because we don't need CI around line.
labs(x = "Fitted Values",
y = "Residuals",
title = "medv vs. crim - Residuals vs. Fitted")
## PUT CODE TO CHECK NORMALITY OF RESIDUALS HERE
resfit <- data.frame(resid = mod1$residuals,
fitted = mod1$fitted.values)
#plot with ggplot
resfit %>% ggplot(aes(x = fitted, y = resid)) +
geom_point() +
geom_smooth(color = "red", se = FALSE) +
## do not use method = "lm" - we want to see possible curvilinear relationships
## se = FALSE because we don't need CI around line.
labs(x = "Fitted Values",
y = "Residuals",
title = "medv/crim - Residuals vs. Fitted")
resfit2 <- data.frame(resid = mod2$residuals,
fitted = mod2$fitted.values)
#plot with ggplot
resfit2 %>% ggplot(aes(x = fitted, y = resid)) +
geom_point() +
geom_smooth(color = "red", se = FALSE) +
## do not use method = "lm" - we want to see possible curvilinear relationships
## se = FALSE because we don't need CI around line.
labs(x = "Fitted Values",
y = "Residuals",
title = "medv/rm - Residuals vs. Fitted")
resfit3 <- data.frame(resid = mod3$residuals,
fitted = mod3$fitted.values)
#plot with ggplot
resfit3 %>% ggplot(aes(x = fitted, y = resid)) +
geom_point() +
geom_smooth(color = "red", se = FALSE) +
## do not use method = "lm" - we want to see possible curvilinear relationships
## se = FALSE because we don't need CI around line.
labs(x = "Fitted Values",
y = "Residuals",
title = "medv/dis - Residuals vs. Fitted")
resfit4 <- data.frame(resid = mod4$residuals,
fitted = mod4$fitted.values)
#plot with ggplot
resfit4 %>% ggplot(aes(x = fitted, y = resid)) +
geom_point() +
geom_smooth(color = "red", se = FALSE) +
## do not use method = "lm" - we want to see possible curvilinear relationships
## se = FALSE because we don't need CI around line.
labs(x = "Fitted Values",
y = "Residuals",
title = "medv/age - Residuals vs. Fitted")
## PUT CODE TO CHECK FOR INFLUENTIAL OUTLIERS HERE
ols_plot_resid_lev(mod1)
library(tidyverse)
library(car)
#install.packages("olsrr") ## you can do the lab without this package, but there are alternate options in the binder if you want to use them
library(olsrr) ## if you want to use this package
## PUT CODE TO CHECK FOR INFLUENTIAL OUTLIERS HERE
ols_plot_resid_lev(mod1)
ols_plot_resid_lev(mod2)
ols_plot_resid_lev(mod3)
ols_plot_resid_lev(mod4)
## PUT CODE TO CHECK FOR HETEROSCEDASTICITY HERE
ols_test_breusch_pagan(mod1)
ols_test_breusch_pagan(mod2)
ols_test_breusch_pagan(mod3)
ols_test_breusch_pagan(mod4)
## PUT CODE TO CHECK FOR HETEROSCEDASTICITY HERE
model <- lm(medv ~ crim + rm + dis + age, data = boston)
ols_test_breusch_pagan(model, rhs = TRUE, multiple = TRUE)
mod2b <- lm(medv ~ crim + rm + dis + age, data = boston)
summary(mod2b)
## PUT CODE TO CHECK FOR INDEPENDENCE OF ERRORS
plot(mod2b, which = 1)
plot(mod2b, which = c(1,3))
## PUT CODE TO CHECK FOR MULTICOLLINEARITY
vif(mod2b)
ols_vif_tol(mod2b)
## MAKE ANY CHANGES YOU NEED TO MAKE
boston <- boston[-c(381),-c(366),-c(368),-c(369), ]
## MAKE ANY CHANGES YOU NEED TO MAKE
boston <- boston[-c(381),-c(366),-c(368),-c(369)]
## MAKE ANY CHANGES YOU NEED TO MAKE
boston <- boston[-c(381),-c(366),-c(368),-c(369),]
## MAKE ANY CHANGES YOU NEED TO MAKE
boston <- boston[-c(381,366)]
## PUT MODEL FIT CODE HERE
## MAKE ANY CHANGES YOU NEED TO MAKE
boston <- boston[-c(381,366,368,369)]
## PUT MODEL FIT CODE HERE
## MAKE ANY CHANGES YOU NEED TO MAKE
boston <- boston[-c(381,366,368,369)]
## PUT MODEL FIT CODE HERE
modRefit <- lm(medv ~ crim + rm + dis, data = boston)
summary(modRefit)
plot(modRefit)
plot(modRefit)
library(tidyverse)
library(car)
#install.packages("olsrr") ## you can do the lab without this package, but there are alternate options in the binder if you want to use them
library(olsrr) ## if you want to use this package
install.packages("performance")
library(tidyverse)
library(car)
#install.packages("olsrr") ## you can do the lab without this package, but there are alternate options in the binder if you want to use them
library(olsrr) ## if you want to use this package
#install.packages("performance")
library(performance)
## CODE TO COMPARE MODELS HERE
compare_performance(mod1b, modRefit)
## CODE TO COMPARE MODELS HERE
compare_performance(mod2b, modRefit)
source('~/BayStat/Sample Driver,Solution/Sample_Driver.R', echo=TRUE)
source('~/BayStat/Sample Driver,Solution/Sample_Driver.R', echo=TRUE)
source('~/BayStat/Sample Driver,Solution/Sample_Driver.R')
source('~/BayStat/Sample Driver,Solution/Sample_Driver.R')
source('~/BayStat/Sample Driver,Solution/Sample_Driver.R')
source('~/BayStat/Sample Driver,Solution/Sample_Driver.R', echo=TRUE)
source('~/BayStat/Sample Driver,Solution/Sample_Solution.R', echo=TRUE)
# Get the message
message = "Welcome to DATS 6311!"
source('~/BayStat/Sample Driver,Solution/Sample_Driver.R', echo=TRUE)
source('~/BayStat/Sample Driver,Solution/Sample_Driver.R', echo=TRUE)
source('~/BayStat/Sample Driver,Solution/Sample_Driver.R', echo=TRUE)
source('~/BayStat/Sample Driver,Solution/Sample_Driver.R')
# Implement me
print(message)
# Print the input message
print_message(message)
source('~/BayStat/Sample Driver,Solution/Sample_Driver.R')
source('~/BayStat/Sample Driver,Solution/Sample_Driver.R')
# Implement me
print(message)
source('~/BayStat/Sample Driver,Solution/Sample_Driver.R')
source('~/BayStat/Sample Driver,Solution/Sample_Driver.R')
source('~/BayStat/Sample Driver,Solution/Sample_Driver.R')
source('~/BayStat/Sample Driver,Solution/Sample_Driver.R')
source('~/BayStat/Homework_1/Driver.R')
install.packages(c("coda", "rjags", "rstan", "runjags"))
source('~/BayStat/Homework_1/Driver.R')
# Students should implement the following four functions in Solution.R:
# loadData: load dataset and return the data of cnt and temp
# train: train the model on the training set hour.csv and return the coefficients, beta_1 and beta_0
# test: test the model on the testing set day.csv and return the Residual Sum of Squares (RSS, defined on page 62 of ISL)
# plotDataModel: plot the data of cnt and temp, the linear model, and save the figures to trainingResultFig.pdf and testingResultFig.pdf
source("DBDA2E-utilities.R")
# Load data
loadData = function(datasetName, yName, xName) {
# Implement me
}
source('~/BayStat/Homework_1/Driver.R')
source('~/BayStat/Homework_1/Driver.R')
source('~/BayStat/Homework_1/Driver.R')
source('~/BayStat/Homework_1/Driver.R')
source("~/GitHub/Baysian_HR_Analytics/Project_Driver.R")
setwd("~/GitHub")
setwd("~/GitHub/Baysian_HR_Analytics")
source("~/GitHub/Baysian_HR_Analytics/Project_Driver.R")
source("~/GitHub/Baysian_HR_Analytics/Project_Driver.R")
